<%
/**
* DESCRIPTION: a content list template for displaying eXo Platform news articles.
* DOCUMENTATION: https://github.com/marwenmema/exo-news-list-templates
* DATE: May 2021
* AUTHOR: Marwen Mema (marwenmema@gmail.com)
* SUPPORTED CLV DISPLAY PARAMETERS: Show header, Header name, 
**/

import org.exoplatform.wcm.webui.paginator.UICustomizeablePaginator;
import org.exoplatform.wcm.webui.clv.UICLVPortlet;
import org.exoplatform.wcm.webui.Utils;
import org.exoplatform.services.wcm.core.NodeLocation;
import org.exoplatform.services.jcr.core.ManageableRepository;
import org.exoplatform.services.wcm.utils.WCMCoreUtils;
import org.exoplatform.social.core.identity.model.Identity;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import org.exoplatform.social.core.space.model.Space;
import org.exoplatform.social.core.space.spi.SpaceService;
import org.exoplatform.webui.application.WebuiRequestContext;
import org.exoplatform.portal.webui.util.Util;
import org.exoplatform.services.security.ConversationState;
import org.exoplatform.commons.utils.CommonsUtils;
import org.exoplatform.container.PortalContainer;
import org.exoplatform.news.NewsService;

import javax.jcr.Node;
import org.apache.commons.lang.StringEscapeUtils;
import org.htmlcleaner.HtmlCleaner;

import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.LocalDateTime;
import java.util.TimeZone;
import java.util.Date;

SpaceService spaceService = CommonsUtils.getService(SpaceService.class);
NewsService newsService = CommonsUtils.getService(NewsService.class);

public String getProfileFullName(String userName) {
  String profileFullName = "";
  Identity identity = org.exoplatform.social.webui.Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME, userName, true);
  if(identity != null && identity.getProfile() != null) {
    profileFullName = identity.getProfile().getFullName();
  }
  return StringEscapeUtils.escapeHtml(profileFullName);
}

def propertyName = "exo:title";
def repo = "";
def workspace = "";
def uuid = "";
def siteName = org.exoplatform.portal.webui.util.Util.getPortalRequestContext().getPortalOwner();
Locale locale = WebuiRequestContext.getCurrentInstance().getLocale();
def mediumDateFormat = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(locale);

def language = locale.getLanguage();
def draftMsg = _ctx.appRes("PublicationStates.draft");
def publishedMsg = _ctx.appRes("PublicationStates.published");
def requestContext = _ctx.getRequestContext();
def jsManager = requestContext.getJavascriptManager();

if (uicomponent.getUIPageIterator().getAvailable() > 0) {
%>

<style type="text/css">

#article-list-1a {
  position: relative;
  overflow: hidden;
  background: #fff;
  padding: 15px 15px 0 15px;
  margin: 0 0 20px 0; /* <-- Adjust this margin if needed */
}
#article-list-1a .header-area {
  position: relative;
  width: 100%;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  font-weight: 400;
  letter-spacing: .033em;
  text-transform: uppercase;
  margin-bottom: 20px;
}
#article-list-1a .header-txt {
  max-width: calc(100% - 90px);
  font-size: 16px;
  color: var(--allPagesGreyColorLighten1,#a8b3c5);
  white-space: nowrap;
  overflow: hidden;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
}
#article-list-1a .seeAll-btn {
  position: absolute;
  top: -3px;
  right: 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  background-color: #f5f5f5;
  height: 28px;
  width: auto;
  min-width: 52px;
  padding: 0 12.44px;
  border-radius: 4px;
  text-decoration: none;
}
#article-list-1a .seeAll-btn:hover {
  background-color: #eeeeee;
  -webkit-transition: all .2s linear;
  -o-transition: all .2s linear;
  transition: all .2s linear;
}
#article-list-1a .seeAll-btn-text {
  font-size: 12px;
  color: #9e9e9e;
  text-transform: uppercase;
}
#article-list-1a .article-container {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}
#article-list-1a .article {
  position: relative;
  height: auto;
  overflow: hidden;
  margin-bottom: 15px;
}
#article-list-1a .articleLink {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  width: auto;
  text-decoration: none;
}
#article-list-1a a {
  height: 100%;
  width: 100%;
}
#article-list-1a .textArea {
  position: relative;
  height: 100%;
  color: var(--allPagesGreyColorLighten1,#a8b3c5);
  font-size: 12px;
  line-height: 18px;
  overflow: hidden;
  margin-left: 10px;
}
#article-list-1a .articlePreTitle {
  display: block;
  width: 100%;
  font-size: 12px;
  line-height: 12px;
  overflow: hidden;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
  margin-bottom: 4px;
}
#article-list-1a .articleTitle {
  display: block;
  width: 100%;
  font-size: 14px;
  color: var(--allPagesBaseTextColor,#333);
  line-height: 16px;
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
  -webkit-transition: 0.3s;
  -o-transition: 0.3s;
  transition: 0.3s;
  padding-bottom: 3px;
}
#article-list-1a .article:hover .articleTitle,
#article-list-1a .article:focus .articleTitle,
#article-list-1a .article:active .articleTitle {
  text-decoration: underline;
  text-decoration-thickness: 2px;
  text-underline-offset: 2px;
}
#article-list-1a .articlePostTitle {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  overflow: hidden;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
}
#article-list-1a .articleDate {
  margin-right: 15px;
}
#article-list-1a .reactions {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
     text-overflow: ellipsis;
}
#article-list-1a .likes-icon {
  margin-right: 4px;
}
#article-list-1a .reactions svg {
  width: 10px;
  height: 10px;
  fill: var(--allPagesGreyColorLighten1,#a8b3c5);
}
#article-list-1a .likes-count {
  margin-right: 10px;
  min-width: 6px;
  max-width: 20px;
}
#article-list-1a .comments-icon {
  margin-right: 4px;
}
#article-list-1a .comments-count {
  min-width: 6px;
  max-width: 20px;
}
#article-list-1a .articleImage {
  position: relative;
  display: inline-block;
  float: left;
  overflow: hidden;
  height: 70px;
  min-width: 70px;
  border-radius: 3px;
}
#article-list-1a img {
  max-width: 100%;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  height: 100%;
  -o-object-fit: cover;
  object-fit: cover;
  width: 100%;
  -webkit-transition: 0.4s;
  -o-transition: 0.4s;
  transition: 0.4s;
}
#article-list-1a .article:hover img {
  -webkit-transform: scale(1.08);
      -ms-transform: scale(1.08);
          transform: scale(1.08);
}

/****** MOBILE VIEW ******/
#article-list-1a.BP1 .header-txt {
  max-width: 100%;
}
#article-list-1a.BP1 .seeAll-btn {
  display: none;
}
#article-list-1a.BP1 .article {
  margin-bottom: 15px;
}
#article-list-1a.BP1 .articleImage {
  display: none;
}
#article-list-1a.BP1 .textArea {
  margin: 0;
}

</style>

<div id="article-list-1a" data-observe-resizes data-breakpoints='{"BP1":276}'>
  <%
  def header = uicomponent.getHeader();
  def isShowHeader = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_HEADER) && header != null && header.trim().length() != 0;
  if (isShowHeader) {
  %>
  <div class="header-area">
    <div class="header-txt">$header</div>
    <a class="seeAll-btn" target="_self" href="/portal/dw/news">
      <%
      def seeAllBtn = "";
      if (language.equals("fr")) {
        seeAllBtn = "Voir tout";
      } else if (language.equals("de")) {
        seeAllBtn = "Alles sehen";
      } else if (language.equals("es")) {
        seeAllBtn = "Ver todo";
      } else if (language.equals("it")) {
        seeAllBtn = "Vedi tutto";
      } else if (language.equals("pt")) {
        seeAllBtn = "Ver tudo";
      } else if (language.equals("ru")) {
        seeAllBtn = "Увидеть все";
      } else if (language.equals("ar")) {
        seeAllBtn = "إظهار الكل";
      } else {
        seeAllBtn = "See all";
      }
      %>
      <div class="seeAll-btn-text">$seeAllBtn</div>
    </a>
  </div>
  <%
  }
  %>

  <div class="article-container">

<%

  def currentPageData = uicomponent.getCurrentPageData();

  for (def i = 0; i < currentPageData.size(); i++) {

  def viewNode = currentPageData.get(i);

  if(!Utils.isViewable(viewNode)) continue;
  def isShowTitle = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_TITLE);
  def isShowDate = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_DATE_CREATED);
  def isShowLink = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_LINK);
  def isShowReadmore = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_READMORE);

  def newsTitle = "";

  StringBuilder newsUrl = new StringBuilder("");
  if (viewNode.hasProperty("exo:activities")) {
    def newsActivityId =  viewNode.getProperty("exo:activities").getString().split(";")[0].split(":")[1];
    Space newsPostedInSpace = spaceService.getSpaceById( viewNode.getProperty("exo:activities").getString().split(";")[0].split(":")[0]);
    def portalName = PortalContainer.getCurrentPortalContainerName();
    def portalOwner = CommonsUtils.getCurrentPortalOwner();
    def currentUsername = newsService.getCurrentIdentity().getUserId();
    if (spaceService.isMember(newsPostedInSpace, currentUsername)) {
      newsUrl.append("/").append(portalName).append("/").append(portalOwner).append("/activity?id=").append(newsActivityId);
    } else {
      newsUrl.append("/").append(portalName).append("/").append(portalOwner).append("/news/detail?content-id=").append(newsService.getPath(viewNode));
    }
  }
  def itemLink = newsUrl.toString();

  def newsPostedDate = "";
  if(viewNode.hasProperty("publication:liveDate")) {
    def postedDate = LocalDateTime.ofInstant(viewNode.getProperty("publication:liveDate").getDate().toInstant(), TimeZone.getDefault().toZoneId());
    newsPostedDate = postedDate.format(mediumDateFormat);
  }

  def isShowImage = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_ILLUSTRATION);
  def imgSrc;
  if(isShowImage) {
    if(viewNode.hasNode("illustration")) {
      def imageNode = viewNode.getNode("illustration");
      imgSrc = WCMCoreUtils.generateImageURI(imageNode, null);
    } else {
      imgSrc = '/news/images/newsImageDefault.png';
    }
  }

  def itemName = viewNode.getName();
  def itemTitle = uicomponent.getTitle(viewNode);

  if(viewNode.hasProperty("exo:title")) {
    newsTitle = StringEscapeUtils.escapeHtml(viewNode.getProperty("exo:title").getString());
  }

  def newsBody = "";
  if(viewNode.hasProperty("exo:body")) {
    newsBody = viewNode.getProperty("exo:body").getString();
    newsBody = new HtmlCleaner().clean(newsBody).getText();
  }

  def itemOwner = "";
  if(viewNode.hasProperty("exo:author")) {
    itemOwner = viewNode.getProperty("exo:author").getString();
    itemOwner = getProfileFullName(itemOwner);
  }

  def itemSummary = StringEscapeUtils.escapeHtml(uicomponent.getSummary(viewNode));
  def itemSummaryField = uicomponent.getSummaryField(viewNode);
  def isShowSummary = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_SUMMARY) && itemSummary != null;
  def newsActivityId =  viewNode.getProperty("exo:activities").getString().split(";")[0].split(":")[1];

  repo = ((ManageableRepository)viewNode.getSession().getRepository()).getConfiguration().getName();
  workspace = viewNode.getSession().getWorkspace().getName();
  uuid = viewNode.getUUID();

%>

    <div class="article" id="article-$uuid">
      <a class="articleLink" target="_self" href="$itemLink">
        <div class="articleImage">
          <img src="$imgSrc">
        </div>
        <div class="textArea">
          <span class="articlePreTitle"></span>
          <span class="articleTitle">$newsTitle</span>
          <div class="articlePostTitle">
            <span class="articleDate">$newsPostedDate</span>
            <div class="reactions">
              <i class="likes-icon">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 489.543 489.543" xml:space="preserve">
                  <path d="M270.024,0c-22.6,0-15,48.3-15,48.3s-48.3,133.2-94.5,168.7c-9.9,10.4-16.1,21.9-20,31.3l0,0l0,0    c-0.9,2.3-1.7,4.5-2.4,6.5c-3.1,6.3-9.7,16-23.8,24.5l46.2,200.9c0,0,71.5,9.3,143.2,7.8c28.7,2.3,59.1,2.5,83.3-2.7    c82.2-17.5,61.6-74.8,61.6-74.8c44.3-33.3,19.1-74.9,19.1-74.9c39.4-41.1,0.7-75.6,0.7-75.6s21.3-33.2-6.2-58.3    c-34.3-31.4-127.4-10.5-127.4-10.5l0,0c-6.5,1.1-13.4,2.5-20.8,4.3c0,0-32.2,15,0-82.7C346.324,15.1,292.624,0,270.024,0z" />
                  <path d="M127.324,465.7l-35-166.3c-2-9.5-11.6-17.3-21.3-17.3h-66.8l-0.1,200.8h109.1C123.024,483,129.324,475.2,127.324,465.7z" />
                </svg>
              </i>
              <div class="likes-count"></div>
              <i class="comments-icon">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" viewBox="0 0 60 60" xml:space="preserve">
                  <path d="M55.232,43.104C58.354,38.746,60,33.705,60,28.5c0-14.888-13.458-27-30-27S0,13.612,0,28.5s13.458,27,30,27  c4.262,0,8.378-0.79,12.244-2.348c6.805,3.927,16.212,5.282,16.618,5.338c0.046,0.007,0.093,0.01,0.139,0.01  c0.375,0,0.725-0.211,0.895-0.554c0.192-0.385,0.116-0.849-0.188-1.153C57.407,54.493,55.823,49.64,55.232,43.104z" />
                </svg>
              </i>
              <div class="comments-count"></div>
            </div>
          </div>
        </div>
      </a>
      <script>
        // Fetch and append article space, like count and comment count
        require(['SHARED/jquery'], function(jquery) {
          jquery.ajax({
            url: "/rest/v1/news/" + '$uuid',
            cache: false
          }).done(function (data) {
            if (data.spaceDisplayName != null) {
              jquery('#article-list-1a #article-$uuid .articlePreTitle').append(data.spaceDisplayName);
            }
          }).fail(function () {
            console.log("Could not fetch space name of news article!");
          })
          jquery.ajax({
            url: "/rest/v1/social/activities/" + '$newsActivityId' + "/likes",
            cache: false
          }).done(function (data) {
            if (data.likes != null) {
              jquery('#article-list-1a #article-$uuid .likes-count').append(data.likes.length);
            }
          }).fail(function () {
            console.log("Could not fetch the number of likes of news article!");
          })
          jquery.ajax({
            url: "/rest/v1/social/activities/" + '$newsActivityId' + "/comments",
            cache: false
          }).done(function (data) {
            if (data.comments != null) {
              jquery('#article-list-1a #article-$uuid .comments-count').append(data.comments.length);
            }
          }).fail(function () {
            console.log("Could not fetch the number of comments of news article!");
          })
        });
      </script>
    </div>

    <%
    }
  }
  %>

  </div>
</div>

<script>
  // A solution for enabling responsive containers (container queries)
  // Source and explanation: https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/

  // Only run if ResizeObserver is supported.
  if ('ResizeObserver' in self) {
    // Create a single ResizeObserver instance to handle all
    // container elements. The instance is created with a callback,
    // which is invoked as soon as an element is observed as well
    // as any time that element's size changes.
    var ro = new ResizeObserver(function(entries) {
      // Default breakpoints that should apply to all observed
      // elements that don't define their own custom breakpoints.
      var defaultBreakpoints = {SM: 384, MD: 576, LG: 768, XL: 960};

      entries.forEach(function(entry) {
        // If breakpoints are defined on the observed element,
        // use them. Otherwise use the defaults.
        var breakpoints = entry.target.dataset.breakpoints ?
            JSON.parse(entry.target.dataset.breakpoints) :
            defaultBreakpoints;

        // Update the matching breakpoints on the observed element.
        Object.keys(breakpoints).forEach(function(breakpoint) {
          var maxWidth = breakpoints[breakpoint];
          if (entry.contentRect.width <= maxWidth) {
            entry.target.classList.add(breakpoint);
          } else {
            entry.target.classList.remove(breakpoint);
          }
        });
      });
    });

    // Find all elements with the `data-observe-resizes` attribute
    // and start observing them.
    var elements = document.querySelectorAll('[data-observe-resizes]');
    for (var element, i = 0; element = elements[i]; i++) {
      ro.observe(element);
    }
  }
</script>