<%
/**
* DESCRIPTION: a CLV (Content List or Content by Query portlet) template for displaying eXo Platform news articles.
* DATE: April 2021
* AUTHOR: Marwen Mema (marwenmema@gmail.com)
* CLV DISPLAY PARAMETERS: You can activate/deactivate "Show header" parameter and fill out the header name field in your CLV display settings. You can also activate/deactivate the "Show date" parameter. The remaining parameters can be ignored as they are not taken into account.
**/

import org.exoplatform.wcm.webui.paginator.UICustomizeablePaginator;
import org.exoplatform.wcm.webui.clv.UICLVPortlet;
import org.exoplatform.wcm.webui.Utils;
import org.exoplatform.services.wcm.core.NodeLocation;
import org.exoplatform.services.jcr.core.ManageableRepository;
import org.exoplatform.services.wcm.utils.WCMCoreUtils;
import org.exoplatform.social.core.identity.model.Identity;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import org.exoplatform.social.core.space.model.Space;
import org.exoplatform.social.core.space.spi.SpaceService;
import org.exoplatform.webui.application.WebuiRequestContext;
import org.exoplatform.portal.webui.util.Util;
import org.exoplatform.services.security.ConversationState;
import org.exoplatform.commons.utils.CommonsUtils;
import org.exoplatform.container.PortalContainer;
import org.exoplatform.news.NewsService;

import javax.jcr.Node;
import org.apache.commons.lang.StringEscapeUtils;
import org.htmlcleaner.HtmlCleaner;

import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.LocalDateTime;
import java.util.TimeZone;
import java.util.Date;

SpaceService spaceService = CommonsUtils.getService(SpaceService.class);
NewsService newsService = CommonsUtils.getService(NewsService.class);

public String getProfileFullName(String userName) {
  String profileFullName = "";
  Identity identity = org.exoplatform.social.webui.Utils.getIdentityManager().getOrCreateIdentity(OrganizationIdentityProvider.NAME, userName, true);
  if(identity != null && identity.getProfile() != null) {
    profileFullName = identity.getProfile().getFullName();
  }
  return StringEscapeUtils.escapeHtml(profileFullName);
}

def propertyName = "exo:title";
def repo = "";
def workspace = "";
def uuid = "";
def siteName = org.exoplatform.portal.webui.util.Util.getPortalRequestContext().getPortalOwner();
Locale locale = WebuiRequestContext.getCurrentInstance().getLocale();
def mediumDateFormat = DateTimeFormatter.ofPattern("MMMM d, h:m a").withLocale(locale);

def language = locale.getLanguage();
def draftMsg = _ctx.appRes("PublicationStates.draft");
def publishedMsg = _ctx.appRes("PublicationStates.published");
def requestContext = _ctx.getRequestContext();
def jsManager = requestContext.getJavascriptManager();

if (uicomponent.getUIPageIterator().getAvailable() > 0) {
%>

<style type="text/css">

#critical-alerts-ticker {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  color: #fff;
  font-size: 14px;
  letter-spacing: 0.1px;
  overflow: hidden;
  height: 48px;
  width: auto;
  background-color: #e14f4f;
  margin: 0 0 20px 0;  /* <-- Adjust this margin if needed */
}
#critical-alerts-ticker .ticker-header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
     -ms-flex-align: center;
        align-items: center;
  height: 100%;
  background-color: var(--allPagesSecondaryColor,#476a9c);
  z-index: 1;
}
#critical-alerts-ticker .ticker-icon {
  padding: 0 12px 0 13px;
}
#critical-alerts-ticker .ticker-icon svg {
  width: 22px;
  height: 22px;
  fill: white;
}
#critical-alerts-ticker .ticker-header span {
  margin-left: -4px;
  padding-right: 15px;
  font-weight: bold;
  text-transform: uppercase;
}
#critical-alerts-ticker .ticker-container {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  overflow: hidden;
  width: auto;
  padding-left: 800px;
}
#critical-alerts-ticker .articleLink {
  color: white;
  text-decoration: none;
  padding-right: 90px;
}
#critical-alerts-ticker .ticker-article {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
#critical-alerts-ticker .ticker-articleTitle {
  display: inline-block;
  white-space: nowrap;
  padding-right: 5px;
  font-weight: bold;
}
#critical-alerts-ticker .ticker-articleDate {
  display: inline-block;
  white-space: nowrap;
  padding-top: 1px;
  color: var(--allPagesSecondaryColor,#476a9c);
  font-size: 13px;
  letter-spacing: 0;
}
#critical-alerts-ticker .ticker-seperator {
  margin: 0 7px 0 8px;
}
#critical-alerts-ticker .ticker-articleTitle:after {
  padding-left: 2px;
  content: ":";
}
#critical-alerts-ticker .ticker-articleSummary {
  display: inline-block;
  white-space: nowrap;
}

/****** MOBILE VIEW ******/
/* Break point 1 */
#critical-alerts-ticker.BP1 .ticker-header span {
  display: none;
}

</style>

<div id="critical-alerts-ticker" data-observe-resizes data-breakpoints='{"BP1":480}'>

  <div class="ticker-header">
    <div class="ticker-icon">
      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
        <path d="M507.494,426.066L282.864,53.537c-5.677-9.415-15.87-15.172-26.865-15.172c-10.995,0-21.188,5.756-26.865,15.172    L4.506,426.066c-5.842,9.689-6.015,21.774-0.451,31.625c5.564,9.852,16.001,15.944,27.315,15.944h449.259    c11.314,0,21.751-6.093,27.315-15.944C513.508,447.839,513.336,435.755,507.494,426.066z M256.167,167.227    c12.901,0,23.817,7.278,23.817,20.178c0,39.363-4.631,95.929-4.631,135.292c0,10.255-11.247,14.554-19.186,14.554    c-10.584,0-19.516-4.3-19.516-14.554c0-39.363-4.63-95.929-4.63-135.292C232.021,174.505,242.605,167.227,256.167,167.227z     M256.498,411.018c-14.554,0-25.471-11.908-25.471-25.47c0-13.893,10.916-25.47,25.471-25.47c13.562,0,25.14,11.577,25.14,25.47    C281.638,399.11,270.06,411.018,256.498,411.018z"></path>
      </svg>
    </div>
    <%
    def header = uicomponent.getHeader();
    def isShowHeader = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_HEADER) && header != null && header.trim().length() != 0;
    if (isShowHeader) {
    %>
    <span>$header</span>
    <%
    }
    %>
  </div>

  <div class="ticker-container" data-ticker="list">
  <%

  def currentPageData = uicomponent.getCurrentPageData();

  for (def i = 0; i < currentPageData.size(); i++) {

  def viewNode = currentPageData.get(i);

  if(!Utils.isViewable(viewNode)) continue;
  def isShowTitle = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_TITLE);
  def isShowDate = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_DATE_CREATED);
  def isShowLink = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_LINK);
  def isShowReadmore = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_READMORE);

  def newsTitle = "";

  StringBuilder newsUrl = new StringBuilder("");
  if (viewNode.hasProperty("exo:activities")) {
    def newsActivityId =  viewNode.getProperty("exo:activities").getString().split(";")[0].split(":")[1];
    Space newsPostedInSpace = spaceService.getSpaceById( viewNode.getProperty("exo:activities").getString().split(";")[0].split(":")[0]);
    def portalName = PortalContainer.getCurrentPortalContainerName();
    def portalOwner = CommonsUtils.getCurrentPortalOwner();
    def currentUsername = newsService.getCurrentIdentity().getUserId();
    if (spaceService.isMember(newsPostedInSpace, currentUsername)) {
      newsUrl.append("/").append(portalName).append("/").append(portalOwner).append("/activity?id=").append(newsActivityId);
    } else {
      newsUrl.append("/").append(portalName).append("/").append(portalOwner).append("/news/detail?content-id=").append(newsService.getPath(viewNode));
    }
  }
  def itemLink = newsUrl.toString();

  def newsPostedDate = "";
  if(viewNode.hasProperty("publication:liveDate")) {
    def postedDate = LocalDateTime.ofInstant(viewNode.getProperty("publication:liveDate").getDate().toInstant(), TimeZone.getDefault().toZoneId());
    newsPostedDate = postedDate.format(mediumDateFormat);
  }

  def isShowImage = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_ILLUSTRATION);
  def imgSrc;
  if(isShowImage) {
    if(viewNode.hasNode("illustration")) {
      def imageNode = viewNode.getNode("illustration");
      imgSrc = WCMCoreUtils.generateImageURI(imageNode, null);
    } else {
      imgSrc = '/news/images/newsImageDefault.png';
    }
  }

  def itemName = viewNode.getName();
  def itemTitle = uicomponent.getTitle(viewNode);

  if(viewNode.hasProperty("exo:title")) {
    newsTitle = StringEscapeUtils.escapeHtml(viewNode.getProperty("exo:title").getString());
  }

  def newsBody = "";
  if(viewNode.hasProperty("exo:body")) {
    newsBody = viewNode.getProperty("exo:body").getString();
    newsBody = new HtmlCleaner().clean(newsBody).getText();
  }

  def itemOwner = "";
  if(viewNode.hasProperty("exo:author")) {
    itemOwner = viewNode.getProperty("exo:author").getString();
    itemOwner = getProfileFullName(itemOwner);
  }

  def itemSummary = StringEscapeUtils.escapeHtml(uicomponent.getSummary(viewNode));
  def itemSummaryField = uicomponent.getSummaryField(viewNode);
  def isShowSummary = uicomponent.isShowField(UICLVPortlet.PREFERENCE_SHOW_SUMMARY) && itemSummary != null;

  repo = ((ManageableRepository)viewNode.getSession().getRepository()).getConfiguration().getName();
  workspace = viewNode.getSession().getWorkspace().getName();
  uuid = viewNode.getUUID();

%>

    <a class="articleLink" id="ticker-item-$uuid" target="_self" href="$itemLink">
      <div class="ticker-article" data-ticker="item">
        <%
        if (isShowDate) {
        %>
        <span class="ticker-articleDate">$newsPostedDate</span>
        <span class="ticker-seperator">|</span>
        <%
        }
        %>
        <span class="ticker-articleTitle">$newsTitle</span>
        <span class="ticker-articleSummary">$itemSummary</span>
      </div>
    </a>

  <%
  }
  %>
  </div>
</div>
<%
}
%>

<script>

  require(['SHARED/jquery'], function(jquery) {

    var ticker = jquery('#critical-alerts-ticker [data-ticker="list"]'),
      tickerItem = '#critical-alerts-ticker [data-ticker="item"]';
    (itemCount = jquery(tickerItem).length), (viewportWidth = 0);

    // Set up the viewport
    function setupViewport() {
      for (i = 0; i < itemCount; i++) {
        var itemWidth = jquery(tickerItem).eq(i).outerWidth();
        viewportWidth = viewportWidth + itemWidth;
      }
    };

    // Animate the ticker from right to left
    function animateTicker() {
      ticker.animate(
        {
          marginLeft: -viewportWidth
        },
        viewportWidth*12,  // Instead of being static, animation speed is based on ticker container width (how many articles) by a factor of 12 (just seemed like a good speed)
        "linear",
        function () {
          ticker.css("margin-left", "0");
          animateTicker();
        }
      );
    };

    // Initialize the ticker
    function initializeTicker() {
      setupViewport();
      animateTicker();
    };
    initializeTicker();

    // Pause the ticker animation on mouseover
    jquery('#critical-alerts-ticker').hover(function() {
      jquery(ticker).stop();
    }, function() {
      animateTicker();
    });

  });

  // A solution for enabling responsive containers (container queries)
  // Source and explanation: https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/

  // Only run if ResizeObserver is supported.
  if ('ResizeObserver' in self) {
    // Create a single ResizeObserver instance to handle all
    // container elements. The instance is created with a callback,
    // which is invoked as soon as an element is observed as well
    // as any time that element's size changes.
    var ro = new ResizeObserver(function(entries) {
      // Default breakpoints that should apply to all observed
      // elements that don't define their own custom breakpoints.
      var defaultBreakpoints = {SM: 384, MD: 576, LG: 768, XL: 960};

      entries.forEach(function(entry) {
        // If breakpoints are defined on the observed element,
        // use them. Otherwise use the defaults.
        var breakpoints = entry.target.dataset.breakpoints ?
            JSON.parse(entry.target.dataset.breakpoints) :
            defaultBreakpoints;

        // Update the matching breakpoints on the observed element.
        Object.keys(breakpoints).forEach(function(breakpoint) {
          var maxWidth = breakpoints[breakpoint];
          if (entry.contentRect.width <= maxWidth) {
            entry.target.classList.add(breakpoint);
          } else {
            entry.target.classList.remove(breakpoint);
          }
        });
      });
    });

    // Find all elements with the `data-observe-resizes` attribute
    // and start observing them.
    var elements = document.querySelectorAll('[data-observe-resizes]');
    for (var element, i = 0; element = elements[i]; i++) {
      ro.observe(element);
    }
  }

</script>